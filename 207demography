#!/usr/bin/env lua

local function mysplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
        table.insert(t, str)
    end
    return t
end

local function Tablelength(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

local function GetCountryTab(global)
    local country = {}
    local tmp_next = {}
    for name = 1, #arg do
        for total = 1, 265, 1 do
            if (arg[name] == global[total][2]) then
                tmp_next = global[total]
                table.insert(country, tmp_next)
                tmp_next = {}
            end
        end
    end
    return (country)
end

local function PopuTable(country)
    local popuDiff = {}
    local totalPopu = {}
    local wtf = 0
    for value = 1, 58, 1 do
        table.insert(popuDiff, 0)
    end
    for value = 3, 60, 1 do
        wtf = 0
        for i = 1, Tablelength(country), 1 do
            table.insert(popuDiff, value - 2, wtf + country[i][value])
            wtf = popuDiff[value - 2]
        end
    end
    return popuDiff
end

local function SumPopu(country)
    local tablePopu = PopuTable(country)
    local sumPopu = 0
    for value = 1, 58, 1 do
        sumPopu = sumPopu + tablePopu[value]
    end
    return sumPopu
end

local function GetDate()
    local date = {}
    local date_val = 1960
    for value = 1, 58, 1 do
        table.insert(date, date_val + value - 1)
    end
    return date
end

local function SumPow(country, sumTable, fit1)
    local sumPow = 0.0;
    local tot = 0
    local date = fit1
    for value = 1, 58, 1 do
        sumPow = sumPow + (date[value] ^ 2)
    end
    tot = (58 * sumPow) - (sumTable ^ 2)
    return tot
end

local function Prod(country)
    local sumVillager = 0
    local prodDatePop = 0
    local product = 0
    local date = GetDate()
    sumVillager = 115333 * SumPopu(country)
    for i = 1, Tablelength(country), 1 do
        for value = 3, 60, 1 do
            prodDatePop = prodDatePop + (date[value - 2] * country[i][value])
        end
    end
    product = prodDatePop * 58 - sumVillager
    return product
end

local function CoeffaY(prod, powDate)
    local bx = prod / powDate;
    --print(prod .. " / " .. powDate .. " = " .. bx)
    return bx
end

local function CoeffbY(country, fit)
    local Mx = 1988.5
    local My = 0
    local total = 0
    local total_village = 0
    for vill = 1, Tablelength(country), 1 do
        for value = 1, 58, 1 do
            My = My + country[vill][value + 2]
        end
    end
    My = My / 58
    total = My - (CoeffaY( Prod(country), SumPow(country, 115333, GetDate())) * Mx)
    if (fit == 1)then
        total = Mx - (CoeffaY( Prod(country), SumPow(country, SumPopu(country), PopuTable(country))) * My)
    end
    return total
end

local function PrintCountry(country)
    io.write("Country: ")
    local sorted = country
    local tmp = 0
    local two_dig = 0
        table.sort(sorted, function (left, right)
                return (left[1] < right[1])
        end)
    for len = 1, Tablelength(country), 1 do
        io.write(country[len][1])
        if (len ~= Tablelength(country)) then
            io.write(", ")
        end
    end
    print("\nFit1")
    two_dig = string.format("%.2f", (CoeffaY(Prod(country), SumPow(country, 115333, GetDate())) / 1000000))
    io.write("    Y = " .. two_dig .. " X - ")
    tmp = CoeffbY(country, 0)
    if (tmp < 0)then
        tmp = tmp * -1
    end
    two_dig = string.format("%.2f", (tmp / 1000000))
    print(two_dig)
    two_dig = string.format("%.2f", (CoeffaY(Prod(country), SumPow(country, SumPopu(country), PopuTable(country)))) * 1000000)
    print("Fit2")
    io.write("    X = " .. two_dig .. " Y - ")
    tmp = CoeffbY(country, 1)
    if (tmp < 0)then
        tmp = tmp * -1
    end
    two_dig = string.format("%.2f", tmp)
    print(two_dig)
    return (sorted)
end

local function main()
    local global = {}
    local country = {}
    local tmp = {}
    for line in io.lines("207demography_data.csv") do
        local splitedLine = mysplit(line, ';')
        for _, v in ipairs(splitedLine) do table.insert(tmp, v) end
        table.insert(global, tmp)
        tmp = {}
    end
    country = GetCountryTab(global)
    if (Tablelength(country) ~= (Tablelength(arg) - 2)) then
        print("Len not valid")
        do return end
    end
    country = PrintCountry(country)
end

main()
