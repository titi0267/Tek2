#!/usr/bin/env lua

local function mysplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
        table.insert(t, str)
    end
    return t
end

local function Tablelength(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

local function GetCountryTab(global)
    local country = {}
    local tmp_next = {}
    for name = 1, #arg do
        for total = 1, 265, 1 do
            if (arg[name] == global[total][2]) then
                tmp_next = global[total]
                table.insert(country, tmp_next)
                tmp_next = {}
            end
        end
    end
    return (country)
end

local function DateTable()
    local dateDiff = {}
    for value = 1, 58, 1 do
        table.insert(dateDiff, (-28.5 + value - 1))
    end
    return (dateDiff)
end

local function PopuTable(country)
    local popuTable = {}
    for value = 3, 60, 1 do
        table.insert(popuTable, country[1][value])
    end
    return popuTable
end

local function MeanPopu(country)
    --local tablePopu = PopuTable(country)
    local sumPopu = 0
    for i = 1, Tablelength(country), 1 do
        for value = 3, 60, 1 do
            sumPopu = sumPopu + country[i][value]
        end
    end
    sumPopu = sumPopu / (58 * Tablelength(country))
    --print("Sum = " .. sumPopu)
    return sumPopu
end

local function PopuMeanTable(country)
    local popuDiff = {}
    local meanPopu = MeanPopu(country)
    print("Population = " .. meanPopu)
    for i = 1, Tablelength(country), 1 do
        for value = 3, 60, 1 do
            --print("Country = " .. country[i][value])
            table.insert(popuDiff, (country[i][value] - meanPopu))
        end
    end
    --print("Popu = " .. popuDiff[70])
    return popuDiff
end

local function SumPow(country, tableChoose, fit1)
    local sumPow = 0.0;
    local dateTable = tableChoose
    --print("Date = " .. dateTable[58])
    for value = 1, 58 * fit1, 1 do
        --print("poputable [" .. value .. "] = " .. dateTable[value])
        sumPow = sumPow + (dateTable[value] ^ 2)
        --print("Sum[" .. value .."] = " .. sumPow)
    end
    --print("Final= " .. sumPow)
    return sumPow
end

local function Prod(country)
    local dateDiff = DateTable()
    local sumVillager = 0
    for vill = 1, Tablelength(country), 1 do
        for value = 1, 58, 1 do
            sumVillager = sumVillager + (dateDiff[value] * country[vill][value + 2])
            --print("Sum[" .. value .."] = " .. sumVillager .." with country = " ..country[vill][value+2])
        end
    end
    --print("Sum Fin = " .. sumVillager)
    return sumVillager
end

local function CoeffaY(powDate, prod)
    local bx = prod / powDate;
    --print(prod .. " / " .. powDate .. " = " .. bx)
    return bx
end

local function CoeffbY(country)
    local Mx = 1988.5
    local My = 0
    local total = 0
    local total_village = 0
    for vill = 1, Tablelength(country), 1 do
        for value = 1, 58, 1 do
            My = My + country[vill][value + 2]
        end
    end
    My = My / 58
    total = My - (CoeffaY(SumPow(country, DateTable(), 1), Prod(country)) * Mx)
    return (total)
end

local function PrintCountry(country)
    io.write("Country: ")
    local sorted = country
    local two_dig = 0
        table.sort(sorted, function (left, right)
                return (left[1] < right[1])
        end)
    for len = 1, Tablelength(country), 1 do
        io.write(country[len][1])
        if (len ~= Tablelength(country)) then
            io.write(", ")
        end
    end
    print("\nFit1")
    two_dig = string.format("%.2f", (CoeffaY(SumPow(country, DateTable(), 1), Prod(country)) / 1000000))
    io.write("    Y = " .. two_dig .. " X - ")
    two_dig = string.format("%.2f", ((-1 * CoeffbY(country)) / 1000000))
    print(two_dig)
    two_dig = string.format("%.2f", (CoeffaY(SumPow(country, PopuMeanTable(country), Tablelength(country)), Prod(country))) * 1000000)
    print("Y = " .. two_dig .. " X - ")
    return (sorted)
end

local function main()
    local global = {}
    local country = {}
    local tmp = {}
    for line in io.lines("207demography_data.csv") do
        local splitedLine = mysplit(line, ';')
        for _, v in ipairs(splitedLine) do table.insert(tmp, v) end
        table.insert(global, tmp)
        tmp = {}
    end
    country = GetCountryTab(global)
    if (Tablelength(country) ~= (Tablelength(arg) - 2)) then
        print("Len not valid")
        do return end
    end
    country = PrintCountry(country)
end

main()
